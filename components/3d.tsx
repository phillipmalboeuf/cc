'use client'

import { FC, FunctionComponent, RefAttributes, useContext, useEffect, useRef, useState } from 'react'
import { SVGRenderer } from 'three-stdlib'
import { SVGLoader } from "three/examples/jsm/loaders/SVGLoader"
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'
import { Canvas, Color, useFrame, useLoader } from '@react-three/fiber'
import {
  Center,
  DeviceOrientationControls,
  Extrude,
  PresentationControls,
} from '@react-three/drei'

import styles from '@//styles/3d.module.scss'
import { BoxGeometry, DoubleSide, ExtrudeGeometry, Group, Mesh, Shape, Vector3 } from 'three'


export const SVG: FunctionComponent<{
  svg: string
  full?: boolean
  load?: boolean
  size?: {
    width: number
    height: number
  }
}> = ({ svg, load, full, size }) => {
  const [shapes, setShapes] = useState<Shape[][]>([])
  const [color, setColor] = useState<Color>()
  const ref = useRef<HTMLDivElement>(null!)
  // const [gl] = useState(() => new SVGRenderer() as unknown as THREE.WebGLRenderer)

  useEffect(() => {
    if (ref.current) {
      const loader = new SVGLoader();

      if (load) {
        loader.loadAsync(svg).then(svgData => {
          setColor(svgData.paths[0].color)
          setShapes(svgData.paths.map(p => p.toShapes(p.color.r === 1 || true)))
        });
      } else {
        const svgData = loader.parse(svg);
        setColor(svgData.paths[0].color)
        setShapes(svgData.paths.map(p => p.toShapes(p.color.r === 1 || false)))
      }
    }
  }, [])

  return <figure className={full ? styles.full : undefined} ref={ref}>
    {shapes && color && <Canvas style={size}>
      <ambientLight intensity={0.1} color={color} />
      <directionalLight position={[0, 0, 5]} color={color} />

      <ExtrudeSVG shapes={shapes} scale={full ? 0.01 : 0.03} color={color} />
    </Canvas>}
  </figure>
}

export const ExtrudeSVG: FunctionComponent<{
  shapes: Shape[][]
  scale: number
  color: Color
}> = ({ shapes, scale, color }) => {
  const mesh = useRef<Mesh>();

  // useFrame(({ clock, pointer }) => {
  //   mesh.current.rotation.y = pointer.x
  //   mesh.current.rotation.x = -pointer.y
  //   mesh.current.scale.z = pointer.y*8 || 0.01
  // })

  window?.innerWidth < 888
    ? useFrame(({ clock, pointer, viewport, gl }) => {
      // console.log(gl.domElement.getBoundingClientRect())
      const position = (gl.domElement.getBoundingClientRect().top + 150) / viewport.height / 100
      mesh.current.rotation.y = position
      mesh.current.rotation.x = -position
      mesh.current.scale.z = position*8 || 0.01
    })
    : useFrame(({ clock, pointer }) => {
      mesh.current.rotation.y = pointer.x
      mesh.current.rotation.x = -pointer.y
      mesh.current.scale.z = pointer.y*8 || 0.01
    })

  return <>
    <mesh ref={mesh}>
      <Center scale={scale} rotation={[Math.PI,0,0]} >
      {shapes?.map((shape, i) => <Extrude key={i} args={[shape, {
        depth: 20
      }]}>
        <meshStandardMaterial color={color} />
      </Extrude>)}
      </Center>
    </mesh>
  </>
}

export const OBJ: FunctionComponent<{
  href: string
  full?: boolean
  size?: {
    width: number
    height: number
  }
}> = ({ href, full, size }) => {
  const ref = useRef<HTMLDivElement>()
  const [obj, setOBJ] = useState<Group>()

  useEffect(() => {
    if (ref.current) {
      const loader = new OBJLoader();

      console.log(href)
      loader.loadAsync(href).then(objData => {
        console.log(objData)
        // setColor(svgData.paths[0].color)
        setOBJ(objData)
      });
    }
  }, [])
  

  // const obj = useLoader(OBJLoader, href)

  return <figure className={full ? styles.full : undefined} style={{ backgroundColor: '#D2D2D2' }} ref={ref}>
    {obj && <Canvas style={size}>
      <ambientLight intensity={0.1} color={'#D2D2D2'} />
      <directionalLight position={[0, 0, 5]} color={'#D2D2D2'} />
      
      <Presentation obj={obj} scale={0.02} color={'#D2D2D2'} />
    </Canvas>}
  </figure>
}

export const Presentation: FunctionComponent<{
  obj: Group
  scale: number
  color: Color
}> = ({ obj, scale, color }) => {
  const ref = useRef<Mesh>()
  useFrame((state, delta) => (ref.current.rotation.y += delta / 2))

  return <PresentationControls>
    <mesh scale={scale} ref={ref}>
      <Center>
        <primitive object={obj}>
          <meshStandardMaterial color={color} />
        </primitive>
      </Center>
    </mesh>
  </PresentationControls>
}



export const Logo: FunctionComponent = () => {
  const width = useRef(typeof window !== 'undefined' && window.innerWidth)

  return (width.current && width.current > 888)
    ? <SVG full svg='<svg width="1006" height="125" viewBox="0 0 1006 125" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M100.662 122.377H143.709L130.627 110.462V0.142822L100.49 14.1545L112.564 22.0398V110.8L100.662 122.377Z" fill="#F5F500"/>
<path d="M815.3 122.377V7.08852H832.702V48.0411L840.133 42.922C840.636 42.5762 841.237 42.3883 841.846 42.3883H862.547C863.215 42.3883 863.869 42.6138 864.402 43.0272L880.828 55.8287C881.564 56.4 881.992 57.2795 881.992 58.2116V105.478C881.992 106.403 881.572 107.275 880.85 107.846L863.313 121.73C862.779 122.151 862.118 122.384 861.442 122.384H842.605C842.169 122.384 841.748 122.294 841.35 122.113L830.034 116.949C829.741 116.814 829.403 116.934 829.253 117.212L826.458 122.384H815.315L815.3 122.377ZM832.198 89.8731C832.198 95.0147 833.761 99.1416 836.887 102.276C840.013 105.403 844.145 106.967 849.285 106.967C854.424 106.967 858.579 105.403 861.765 102.276C864.951 99.1491 866.536 95.0147 866.536 89.8731V74.8842C866.536 69.7426 864.943 65.6158 861.765 62.4812C858.579 59.3541 854.424 57.7906 849.285 57.7906C844.145 57.7906 840.02 59.3541 836.887 62.4812C833.761 65.6083 832.198 69.7426 832.198 74.8842V89.8731Z" fill="red"/>
<path d="M570.553 122.377H613.81L600.931 110.815L601.096 71.9977C601.096 64.2327 599.939 57.6252 596.633 52.6715C592.012 45.4026 584.754 41.6065 575.504 41.6065C563.618 41.6065 556.021 47.0563 550.739 55.3175L550.574 0.00752258L519.692 13.7711L531.744 21.7016V110.958L520.023 122.354L563.452 122.377L550.739 110.815V71.3362C550.739 62.4136 557.839 55.1446 567.081 55.1446C573.025 55.1446 577.488 57.287 579.96 61.9174C582.109 66.0518 582.44 72.1631 582.44 78.5976L582.274 110.815L570.553 122.377Z" fill="#F5F500"/>
<path d="M86.2509 94.8343L85.8827 95.2027C78.2938 102.795 68.1802 106.974 57.4054 106.974C35.7206 106.974 18.7319 89.6326 18.7319 67.495C18.7319 45.3575 35.7206 28.0233 57.4054 28.0233C68.1276 28.0233 78.5643 32.3155 86.0405 39.7874L86.4162 40.1633L97.747 27.6625L97.4239 27.3167C87.1 16.4998 72.8914 10.5388 57.4054 10.5388C24.6753 10.5463 0 35.0292 0 67.495C0 99.9609 24.6753 124.451 57.3979 124.451C72.8763 124.451 87.145 118.438 97.5742 107.515L97.9048 107.162L86.2434 94.8268L86.2509 94.8343Z" fill="#F5F500"/>
<path d="M355.065 7.08853V61.271C341.277 46.6053 332.38 42.0651 321.906 42.0651C304.459 42.0651 293.985 56.2045 293.985 83.0928C293.985 109.981 304.286 124.121 321.906 124.121C333.079 124.121 342.329 119.407 356.462 103.689C356.109 109.455 356.109 112.77 356.109 122.369H373.383V7.08853H355.057H355.065ZM346.055 93.0829C336.25 101.878 331.854 107.711 326.264 107.711C318.059 107.711 312.649 99.1566 312.649 83.0928C312.649 67.029 318.059 58.4747 326.264 58.4747C331.847 58.4747 335.792 63.5411 345.83 72.5615L357.334 83.0928L346.055 93.0829Z" fill="#F5F500"/>
<path d="M267.98 98.5026C267.98 100.765 267.221 102.66 265.695 104.178C264.17 105.704 262.284 106.463 260.023 106.463C257.761 106.463 255.867 105.704 254.35 104.178C252.824 102.66 252.065 100.765 252.065 98.5026V42.3808H236.159V98.5026C236.159 101.938 236.752 105.11 237.924 108.004C239.104 110.906 240.772 113.431 242.936 115.596C245.1 117.761 247.625 119.43 250.525 120.603C253.418 121.783 256.581 122.369 260.023 122.369C261.292 122.369 262.547 122.294 263.779 122.151C265.012 122.001 266.409 121.685 267.98 121.196V122.369H283.886V42.3808H267.98V98.5026Z" fill="#F5F500"/>
<path d="M214.091 49.9654C210.341 46.7331 205.923 44.4254 200.836 43.0423C195.749 41.6591 190.377 40.9601 184.734 40.9601C170.142 40.9601 159.308 44.7336 152.214 52.2731C145.121 59.8127 141.575 70.6146 141.575 84.6714C141.575 92.3612 142.702 98.8033 144.964 103.982C147.225 109.162 150.231 113.319 153.98 116.453C157.73 119.58 162.118 121.79 167.159 123.068C172.194 124.346 177.483 124.992 183.036 124.992C197.117 124.992 207.847 121.324 215.248 113.988C222.649 106.651 226.346 96.2625 226.346 82.8222C226.346 74.8166 225.241 68.149 223.032 62.812C220.823 57.4749 217.84 53.1977 214.091 49.9654ZM200.31 106.801C197.034 112.251 191.354 114.972 183.269 114.972C179.993 114.972 177.1 114.454 174.591 113.431C172.081 112.409 169.932 110.582 168.144 107.959C166.348 105.336 164.988 101.772 164.071 97.2473C163.155 92.7296 162.689 86.9716 162.689 79.9732C162.689 70.6221 164.424 63.4509 167.911 58.4671C171.39 53.4834 176.965 50.9877 184.644 50.9877C187.717 50.9877 190.505 51.4763 193.014 52.4535C195.524 53.4307 197.703 55.1521 199.536 57.6177C201.377 60.0833 202.79 63.4208 203.759 67.6379C204.736 71.8549 205.217 77.1995 205.217 83.6716C205.217 93.6391 203.579 101.352 200.303 106.801H200.31Z" fill="#F5F500"/>
<path d="M1006 73.0576V61.8799C1006 59.076 1005.45 56.4225 1004.35 53.9194C1003.26 51.4237 1001.79 49.2513 999.951 47.4097C998.11 45.568 995.947 44.1022 993.444 43.0047C990.95 41.9147 988.297 41.366 985.495 41.366C982.692 41.366 980.04 41.9147 977.538 43.0047C975.043 44.1022 972.872 45.568 971.031 47.4097C969.19 49.2513 967.725 51.4237 966.628 53.9194C965.531 56.4225 964.982 59.076 964.982 61.8799V122.369H982.857V60.9553C982.857 59.294 983.714 58.4521 985.42 58.4521C986.141 58.4521 986.765 58.7002 987.306 59.1737C987.847 59.6548 988.117 60.2487 988.117 60.9478V73.0501H1006V73.0576ZM954.688 58.4671V42.3733H929.051C905.781 42.3733 889.416 59.1587 889.416 82.1006C889.416 105.042 905.773 122.369 928.878 122.369H954.688V106.275H929.908C918.269 106.275 910.402 99.7279 907.832 89.9708H952.983V74.2228H907.832C910.402 64.4657 918.269 58.4596 929.908 58.4596H954.688V58.4671ZM751.147 74.3731C751.147 69.6374 750.816 65.5557 750.005 61.8047C753.92 55.9264 759.307 52.3333 765.671 52.3333C775.792 52.3333 779.053 61.6393 779.053 79.2742C779.053 86.295 778.565 111.672 778.565 113.634C778.565 114.657 777.881 115.904 776.604 117.062L771.532 122.046V122.369H806.644V122.046L801.084 117.062C799.881 116.01 799.288 114.995 799.288 113.469C799.288 100.412 799.618 84.4985 799.618 74.3731C799.618 51.8447 790.97 41.0728 776.123 41.0728C763.071 41.0728 753.604 48.913 749.847 60.8275C746.909 47.6051 739.08 41.0728 727.328 41.0728C714.765 41.0728 706.275 47.9283 702.36 60.9929V42.3808H674.604V42.7115L680.164 48.8379C681.088 50.439 681.795 51.5665 681.795 52.5889V113.469C681.795 114.784 681.472 115.904 680.164 117.062L674.604 122.046V122.369H709.716V122.046L704.156 117.062C702.781 115.792 702.36 114.867 702.36 113.469V62.3008C705.786 56.4225 710.52 52.3408 717.207 52.3408C727.155 52.3408 730.589 61.3161 730.589 78.9509C730.589 86.1372 730.101 111.845 730.101 113.642C730.101 114.649 729.417 115.739 728.14 117.07L723.068 122.053V122.377H758.18V122.053L752.62 117.07C751.508 115.957 750.824 114.634 750.824 113.476C750.824 100.419 751.155 83.3634 751.155 74.3806M642.956 102.72C642.167 100.833 641.07 99.1942 639.672 97.7885C638.267 96.3904 636.629 95.2929 634.743 94.5036C632.857 93.7143 630.859 93.3234 628.762 93.3234C626.666 93.3234 624.667 93.7218 622.781 94.5036C620.895 95.2929 619.257 96.3904 617.852 97.7885C616.455 99.1942 615.358 100.84 614.569 102.72C613.78 104.606 613.389 106.598 613.389 108.703C613.389 110.808 613.787 112.8 614.569 114.687C615.358 116.573 616.455 118.22 617.852 119.618C619.257 121.024 620.895 122.121 622.781 122.903C624.667 123.692 626.658 124.083 628.762 124.083C630.866 124.083 632.857 123.692 634.743 122.903C636.629 122.113 638.267 121.016 639.672 119.618C641.077 118.22 642.174 116.573 642.956 114.687C643.745 112.8 644.135 110.808 644.135 108.703C644.135 106.598 643.745 104.606 642.956 102.72ZM663.731 122.377V61.8874C663.731 59.0835 663.183 56.43 662.086 53.9269C660.989 51.4312 659.524 49.2588 657.683 47.4172C655.842 45.5755 653.678 44.1097 651.176 43.0122C648.681 41.9223 646.029 41.3735 643.219 41.3735C640.409 41.3735 637.764 41.9223 635.262 43.0122C632.767 44.1097 630.596 45.5755 628.755 47.4172C626.914 49.2588 625.449 51.4312 624.352 53.9269C623.255 56.43 622.714 59.0835 622.714 61.8874V76.7485H640.589V60.9703C640.589 60.2712 640.837 59.6774 641.333 59.1963C641.829 58.7152 642.43 58.4747 643.151 58.4747C643.872 58.4747 644.496 58.7378 645.037 59.2639C645.578 59.7901 645.849 60.4065 645.849 61.1056V122.392H663.731V122.377ZM514.658 101.186H511.517C508.804 102.652 506.475 103.93 502.395 105.027C498.323 106.125 494.138 106.674 489.855 106.674C481.402 106.674 473.692 104.08 466.735 98.901C463.887 96.7812 461.355 94.2405 459.228 91.3991C454.044 84.4383 451.452 76.7184 451.452 68.2693C451.452 60.5794 453.593 53.5059 457.876 47.0488C460.528 43.0498 463.925 39.5544 467.862 36.8107C474.519 32.1727 481.852 29.85 489.847 29.85C497.368 29.85 503.094 31.6766 509.158 35.3374H512.291V14.1695H465.803C465.277 14.1695 464.774 14.38 464.405 14.7483L434.508 45.5454C434.14 45.9138 433.929 46.4249 433.929 46.9511V89.9934C433.929 90.5196 434.14 91.0232 434.508 91.3916L463.624 121.768C463.992 122.136 464.503 122.347 465.022 122.347H514.65V101.179L514.658 101.186Z" fill="#F5F500"/>
</svg>
' />
: <SVG full svg='<svg width="100vw" height="100vw" viewBox="0 0 205 115" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M86.2509 84.8343L85.8827 85.2027C78.2938 92.7948 68.1802 96.9743 57.4054 96.9743C35.7206 96.9743 18.7319 79.6326 18.7319 57.495C18.7319 35.3575 35.7206 18.0233 57.4054 18.0233C68.1276 18.0233 78.5643 22.3155 86.0405 29.7874L86.4162 30.1633L97.747 17.6625L97.4239 17.3167C87.1 6.49979 72.8914 0.538818 57.4054 0.538818C24.6753 0.546335 0 25.0292 0 57.495C0 89.9609 24.6753 114.451 57.3979 114.451C72.8763 114.451 87.145 108.438 97.5742 97.5155L97.9048 97.1622L86.2434 84.8268L86.2509 84.8343Z" fill="#F5F500"/>
<path d="M204.658 91.1862H204.65V112.347H155.022C154.503 112.347 153.992 112.136 153.624 111.768L124.508 81.3916C124.14 81.0232 123.929 80.5196 123.929 79.9934V36.9511C123.929 36.4249 124.14 35.9138 124.508 35.5454L154.405 4.74833C154.774 4.38 155.277 4.16953 155.803 4.16953H202.291V25.3374H199.158C193.094 21.6766 187.368 19.85 179.847 19.85C171.852 19.85 164.519 22.1727 157.862 26.8107C153.925 29.5544 150.528 33.0498 147.876 37.0488C143.593 43.5059 141.452 50.5794 141.452 58.2693C141.452 66.7184 144.044 74.4383 149.228 81.3991C151.355 84.2405 153.887 86.7812 156.735 88.901C163.692 94.0802 171.402 96.6736 179.855 96.6736C184.138 96.6736 188.323 96.1249 192.395 95.0274C196.407 93.9483 198.726 92.6948 201.381 91.2597L201.517 91.1862H204.65V91.1787L204.658 91.1862Z" fill="#F5F500"/>
</svg>
' />
}

const svgs = [
  `<svg width="102" height="138" viewBox="0 0 102 138" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M102 138H40L5.66244e-07 98V41L41 -1.14441e-05H99V27H95C87.2667 22.3333 78.6 20 69 20C60.2 20 52 22.2 44.4 26.6C36.9333 31 31 37 26.6 44.6C22.2 52.0667 20 60.2 20 69C20 77.8 22.2 86 26.6 93.6C31 101.067 36.9333 107 44.4 111.4C52 115.8 60.2 118 69 118C74.4667 118 79.8 117.333 85 116C90.2 114.533 94.5333 112.867 98 111H102V138Z" fill="black"/>
</svg>`,
  `<svg width="102" height="138" viewBox="0 0 102 138" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M102 138H40L5.66244e-07 98V41L41 -1.14441e-05H99V27H95C87.2667 22.3333 78.6 20 69 20C60.2 20 52 22.2 44.4 26.6C36.9333 31 31 37 26.6 44.6C22.2 52.0667 20 60.2 20 69C20 77.8 22.2 86 26.6 93.6C31 101.067 36.9333 107 44.4 111.4C52 115.8 60.2 118 69 118C74.4667 118 79.8 117.333 85 116C90.2 114.533 94.5333 112.867 98 111H102V138Z" fill="black"/>
    </svg>`,
  `<svg width="67" height="146" viewBox="0 0 67 146" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M66.4 42.4H46V36.8C46 23.8 38.2 20.8 33.4 20.8C22.4 20.8 20.8 29.2 20.8 36.8V110.8C20.8 117.4 23.6 124.8 33.2 124.8C37.2 124.8 46 123.2 46 109.8V103.4H66.4V111.6C66.4 130.4 51.8 145.2 34 145.2C13 145.2 0.400001 132.4 0.400001 112.4V32.8C0.400001 15 13.6 0.399989 33.6 0.399989C43.8 0.399989 51.8 4.59999 57.2 10.2C62.8 16.2 66.4 23.2 66.4 36.2V42.4Z" fill="black"/>
</svg>`,
  `<svg width="124" height="155" viewBox="0 0 124 155" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M71.8 16.6C46.4 16.6 30.6 39.8 30.6 75.4C30.6 114.6 42.8 138.4 73.2 138.4C86.6 138.4 96.8 130.6 105.2 120.6C112.4 111.8 119 99.8 124 89V154.4L105.6 140.6C96.4 147.8 83.6 152.6 68.4 152.6C22 152.6 0.2 121.6 0.2 79.6C0.2 29.6 29.2 2.19999 70.4 2.19999C82 2.19999 96.4 6.99999 106.2 14.8L124 0.399994V66.2C119.2 56.2 111.2 41.8 103.6 32.6C94.6 21.6 84.4 16.6 71.8 16.6Z" fill="black"/>
</svg>`,
  `<svg width="110" height="146" viewBox="0 0 110 146" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M47.8 145.6L26.2 136.2L12.6 122.4L4 104.6L0.2 87.6V58.2L4 40.8L12.4 23.4L26.8 9.39999L47.8 0.199992H70L91.2 8.59999L100.2 15.6L109.8 26.8L94.2 41.6L85.8 32L80.4 27.8L66.8 21.8H52L39.4 27.6L30.4 36.4L24.8 47.6L21.8 60.6V85L24.8 98L30.6 109.6L39.2 118L52 124H66.8L80.8 118L86 113.8L94.2 104.2L109.8 119L100.2 130.2L91.2 137.2L70 145.6H47.8Z" fill="black"/>
</svg>`,
  `<svg width="110" height="139" viewBox="0 0 110 139" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M68.6 139C25.8 139 0.6 118 0.6 69.8C0.6 23.4 24.2 0.599992 68.6 0.599992C81.4 0.599992 95.8 3.19999 108.8 7.19999V37.2C95.8 30.8 81 27.6 68.6 27.6C43.4 27.6 32 39.6 32 69.8C32 100 43.6 112 68.6 112C81.6 112 96.6 108.6 109.6 102.6V132.4C95 137 81.4 139 68.6 139Z" fill="black"/>
</svg>`,
  `<svg width="118" height="142" viewBox="0 0 118 142" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M63 141.4C26.2 141.4 0.200001 115 0.200001 71C0.200001 27 26.2 0.599994 63 0.599994C79.6 0.599994 99.4 6.99999 117.4 18.4V43.8L98.8 32.6C87.6 25.8 73.8 21.2 63 21.2C39.6 21.2 23 39.2 23 71C23 102.2 38.8 120.8 62 120.8C73 120.8 87.6 116.2 98.8 109.4L117.4 98.2V123.6C99.4 135 79.6 141.4 63 141.4Z" fill="black"/>
</svg>`,
  `<svg width="113" height="143" viewBox="0 0 113 143" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M60.6 0.199998C75.4 0.199998 87.4667 5.86666 96.8 17.2L96.6 15C96.6 14.3333 96.6 13.6 96.6 12.8C96.4667 12 96.4 11.5333 96.4 11.4C96.1333 8.46666 96 7.13333 96 7.39999C96 2.86666 98.1333 0.599993 102.4 0.599993C106.933 0.599993 109.2 3.39999 109.2 8.99999C109.2 10.0667 108.933 13.2667 108.4 18.6C107.733 25.2667 107.4 29.8667 107.4 32.4C107.4 36 107.6 39.6667 108 43.4L108.8 51V53C108.8 59 106.4 62 101.6 62C96.4 62 93.8667 59.1333 94 53.4L94.2 46.2C94.4667 36.6 91.4667 28.8 85.2 22.8C78.9333 16.8 70.7333 13.8 60.6 13.8C47.4 13.8 37.0667 18.8667 29.6 29C22.1333 39.1333 18.4 53.1333 18.4 71C18.4 89.2667 22.2 103.533 29.8 113.8C37.5333 123.933 48.2667 129 62 129C69.4667 129 76.1333 127.2 82 123.6C88 120 92.2 115.267 94.6 109.4C96.2 105.533 97 100.333 97 93.8C97 87.6667 99.5333 84.6 104.6 84.6C110.067 84.6 112.8 87.6667 112.8 93.8C112.8 108.067 107.867 119.733 98 128.8C88.1333 137.867 75.4 142.4 59.8 142.4C41.8 142.4 27.4 136.067 16.6 123.4C5.93333 110.733 0.600001 93.8667 0.600001 72.8C0.600001 51.0667 6.06667 33.5333 17 20.2C28.0667 6.86666 42.6 0.199998 60.6 0.199998Z" fill="black"/>
</svg>`
]

export const PetitLogo: FunctionComponent = () => {

  const [firstShapes, setFirstShapes] = useState<Shape[][]>([])
  const [secondShapes, setSecondShapes] = useState<Shape[][]>([])

  useEffect(() => {
    const loader = new SVGLoader();

    setFirstShapes(loader.parse(svgs[Math.floor(Math.random() * svgs.length)]).paths.map(p => p.toShapes(p.color.r === 1 || false)))
    setSecondShapes(loader.parse(svgs[Math.floor(Math.random() * svgs.length)]).paths.map(p => p.toShapes(p.color.r === 1 || false)))

    const interval = setInterval(() => {
      setFirstShapes(loader.parse(svgs[Math.floor(Math.random() * svgs.length)]).paths.map(p => p.toShapes(p.color.r === 1 || false)))
      setSecondShapes(loader.parse(svgs[Math.floor(Math.random() * svgs.length)]).paths.map(p => p.toShapes(p.color.r === 1 || false)))
    }, 1666)
    
    return () => clearInterval(interval)
  }, [])
  
  return <>
  <Canvas style={{ width: '16px', height: '32px', display: 'inline-block' }}>
    <ambientLight intensity={0.1} color={'white'} />
    <directionalLight position={[0, 0, 5]} color={'white'} />
    <RandomSVG shapes={firstShapes} scale={0.03} color={'white'} />
    {/* <RandomSVG shapes={secondShapes} right scale={0.03} color={'black'} /> */}
  </Canvas>
  <Canvas style={{ width: '16px', height: '32px', display: 'inline-block' }}>
    <ambientLight intensity={0.1} color={'white'} />
    <directionalLight position={[0, 0, 5]} color={'white'} />
    <RandomSVG shapes={secondShapes} scale={0.03} color={'white'} />
  </Canvas>

  {/* <svg width="2em" height="1em" viewBox="0 0 205 115" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M86.2509 84.8343L85.8827 85.2027C78.2938 92.7948 68.1802 96.9743 57.4054 96.9743C35.7206 96.9743 18.7319 79.6326 18.7319 57.495C18.7319 35.3575 35.7206 18.0233 57.4054 18.0233C68.1276 18.0233 78.5643 22.3155 86.0405 29.7874L86.4162 30.1633L97.747 17.6625L97.4239 17.3167C87.1 6.49979 72.8914 0.538818 57.4054 0.538818C24.6753 0.546335 0 25.0292 0 57.495C0 89.9609 24.6753 114.451 57.3979 114.451C72.8763 114.451 87.145 108.438 97.5742 97.5155L97.9048 97.1622L86.2434 84.8268L86.2509 84.8343Z" fill="black"/>
<path d="M204.658 91.1862H204.65V112.347H155.022C154.503 112.347 153.992 112.136 153.624 111.768L124.508 81.3916C124.14 81.0232 123.929 80.5196 123.929 79.9934V36.9511C123.929 36.4249 124.14 35.9138 124.508 35.5454L154.405 4.74833C154.774 4.38 155.277 4.16953 155.803 4.16953H202.291V25.3374H199.158C193.094 21.6766 187.368 19.85 179.847 19.85C171.852 19.85 164.519 22.1727 157.862 26.8107C153.925 29.5544 150.528 33.0498 147.876 37.0488C143.593 43.5059 141.452 50.5794 141.452 58.2693C141.452 66.7184 144.044 74.4383 149.228 81.3991C151.355 84.2405 153.887 86.7812 156.735 88.901C163.692 94.0802 171.402 96.6736 179.855 96.6736C184.138 96.6736 188.323 96.1249 192.395 95.0274C196.407 93.9483 198.726 92.6948 201.381 91.2597L201.517 91.1862H204.65V91.1787L204.658 91.1862Z" fill="black"/>
</svg> */}
  </>
}

export const RandomSVG: FunctionComponent<{
  shapes: Shape[][]
  scale: number
  color: Color
  left?: boolean
  right?: boolean
}> = ({ shapes, scale, color, left, right }) => {
  const mesh = useRef<Mesh>();

  const start = {
    x: Math.random() * -5,
    y: Math.random() * 5
  }

  useFrame(({ clock }) => {
    mesh.current.rotation.y = start.x + (clock.elapsedTime / 2)
    mesh.current.rotation.x = start.y + (-clock.elapsedTime / 2)
    // mesh.current.scale.z = pointer.y*8 || 0.01
  })

  return <>
    <mesh ref={mesh}>
      <Center scale={scale} left={left} right={right} rotation={[Math.PI,0,0]} >
      {shapes?.map((shape, i) => <Extrude key={i} args={[shape, {
        depth: 2
      }]}>
        <meshStandardMaterial color={color} />
      </Extrude>)}
      </Center>
    </mesh>
  </>
}